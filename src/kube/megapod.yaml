---
# The k8 service will allow db-sync to reach cardano-node via localhost:3001
apiVersion: v1
kind: Service
metadata:
  name: cardano-node-service
  namespace: sidechains-substrate-poc
spec:
  selector:
    app: cardano-node
  ports:
    - protocol: TCP
      port: 3001
      targetPort: 3001
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vector-config
  namespace: sidechains-substrate-poc
data:
  vector.toml: |
    [api]
    enabled = true
    address = "0.0.0.0:8686"

    [sources.log_file]
    type = "file"
    include = ["/var/log/*.log"]

    [sinks.console]
    inputs = ["log_file"]
    target = "stdout"
    type = "console"
    encoding.codec = "json"
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sidechains-substrate-poc
  namespace: sidechains-substrate-poc
spec:
  serviceName: sidechains-substrate-poc
  replicas: 1
  selector:
    matchLabels:
      app: sidechains-substrate-poc
  template:
    metadata:
      labels:
        app: sidechains-substrate-poc
    spec:
      containers:


        - name: substrate-node
          image: parity/substrate
          ports:
            - containerPort: 30333
              protocol: TCP
            - containerPort: 9933
              protocol: TCP
            - containerPort: 9944
              protocol: TCP
            - containerPort: 9615
              protocol: TCP
          args:
            - "--dev"
          env: []
          volumeMounts:
            - name: chain-data
              mountPath: /chain-data


        - name: cardano-node
          image: inputoutput/cardano-node:8.0.0
          ports:
            - containerPort: 3001
          env:
            - name: NETWORK
              value: "preview"
            - name: CARDANO_NODE_SOCKET_PATH
              value: /ipc/node.socket
          volumeMounts:
            - name: node-ipc
              mountPath: /ipc
            - name: datavol
              mountPath: /opt/cardano/data


        - name: postgres
          image: postgres:15.3
          ports:
            - containerPort: 5432
              protocol: TCP
          env:
             name: POSTGRES_HOST_AUTH_METHOD
             value: "trust"
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
            - name: postgres-run
              mountPath: /run/postgresql


        - name: vector
          image: timberio/vector:nightly-alpine
          ports:
            - containerPort: 8686
          volumeMounts:
            - name: vector-config-volume
              mountPath: /etc/vector
            - name: logs
              mountPath: /var/log


        - name: bridge-backend
          image: 305415268059.dkr.ecr.eu-central-1.amazonaws.com/bridge-backend:0.0.15
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: postgres-run
              mountPath: /run/postgresql


        - name: cardano-db-sync
          image: inputoutput/cardano-db-sync:latest
          env:
            - name: NETWORK
              value: "preview"
            - name: CARDANO_NODE_SOCKET_PATH
              value: /ipc/node.socket
          volumeMounts:
            - name: node-ipc
              mountPath: /ipc
            - name: postgres-run
              mountPath: /run/postgresql




      volumes:
        - name: chain-data    
          emptyDir: {}
        - name: node-ipc     
          emptyDir: {}
        - name: datavol       
          emptyDir: {}
        - name: keys         
          emptyDir: {}
        - name: postgres-data
          emptyDir: {}
        - name: postgres-run
          emptyDir: {}
        - name: vector-config-volume 
          configMap:
            name: vector-config
        - name: logs          
          emptyDir: {}
