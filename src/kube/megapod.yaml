---
apiVersion: v1
kind: ConfigMap
metadata:
  name: relaycfg
data:
  # TODO: Add actual values
  publicIP: "<EXTERNAL_IP:NODE_PORT>"
  customPeers: "<BPROD_CLUSTER_IP:3001>"
  # TODO: Add actual values
  topology: |
    {
      "Producers": [
        {
          "addr": "relays-new.cardano-mainnet.iohk.io",
          "port": 3001,
          "valency": 1
        }
        {
          "addr": "<BPROD_CLUSTER_IP>",
          "port": 3001,
          "valency": 1
        }
      ]
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vector-config
data:
  # TODO: Add actual values
  vector.toml: |
    [api]
    enabled = true
    address = "0.0.0.0:8686"

    [sources.vector_logs]
    type = "vector_logs"
    interval = 1.0
    format = "json"

    [sinks.console]
    inputs = ["vector_logs"]
    target = "stdout"
    type = "console"
    encoding.codec = "json"
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sidechains-substrate-poc
spec:
  serviceName: "sidechains-service"
  replicas: 1
  selector:
    matchLabels:
      app: sidechains-substrate-poc
  template:
    metadata:
      labels:
        app: sidechains-substrate-poc
    spec:
      containers:
      - name: substrate-node
        image: parity/substrate
        ports:
        - containerPort: 30333
          name: p2p
        - containerPort: 9933
          name: rpc
        - containerPort: 9944
          name: ws
        - containerPort: 9615
          name: metrics
        volumeMounts:
        - name: chain-data
          mountPath: /chain-data
      - name: cardano-node
        image: inputoutput/cardano-node
        imagePullPolicy: Always
        env:
        - name: CARDANO_TOPOLOGY
          valueFrom:
            configMapKeyRef:
              name: relaycfg
              key:  topology
        - name: CARDANO_CUSTOM_PEERS
          valueFrom:
            configMapKeyRef:
              name: relaycfg
              key:  customPeers
        - name: CARDANO_UPDATE_TOPOLOGY
          value: "true"
        args: [ "run" ]
        ports:
          - containerPort: 3001
        volumeMounts:
        - name: datavol
          mountPath: /opt/cardano/data
        - name: node-ipc
          mountPath: /node-ipc
        - name: keys
          mountPath: /var/cardano/secret/keys

      - name: postgres
        image: postgres
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data

      - name: vector
        image: timberio/vector
        ports:
        - containerPort: 8686
          name: vector-api
        volumeMounts:
        - name: vector-config-volume
          mountPath: /etc/vector
        - name: logs
          mountPath: /var/log
     
      - name: bridge-backend
        # TODO: add image
        image: <image>
        volumeMounts:
        - name: node-ipc
          mountPath: /node-ipc
        - name: postgres-data
          mountPath: /var/lib/postgresql/data

      - name: cardano-db-sync
        image: inputoutput/cardano-db-sync
        args: ["run", "--config", "/config/config.yaml", "--socket-path", "/node-ipc/node.socket"]
        volumeMounts:
        - name: db-sync-data
          mountPath: /var/lib/cexplorer
        - name: node-ipc
          mountPath: /node-ipc
        - name: db-sync-config
          mountPath: /config
        - name: genesis-config
          mountPath: /genesis

      volumes:
      - name: vector-config-volume
        configMap:
          name: vector-config
      - name: logs
        emptyDir: {}
        volumes:
      - name: node-ipc
        emptyDir: {}
      - name: datavol
        persistentVolumeClaim:
          claimName: relay-data
      - name: keys
        secret:
          secretName: secrets
          defaultMode: 0400
      - name: db-sync-config
        configMap:
          name: db-sync-config
      - name: genesis-config
        configMap:
          name: genesis-config

  volumeClaimTemplates:
  - metadata:
      name: chain-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          # 1 year estimate + 5GB
          storage: 50Gi
  - metadata:
      name: relay-data
    spec:
      storageClassName: cardano-standard-rwo
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          # for relay operation config only
          storage: 5Gi
  - metadata:
      name: postgres-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          # 1 year estimate + 5GB
          storage: 50Gi
  - metadata:
      name: db-sync-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          # for logs only
          storage: 5Gi
       

