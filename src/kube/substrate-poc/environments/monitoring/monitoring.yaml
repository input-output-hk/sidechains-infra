---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: monitoring
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: monitoring-vector-configmap
  namespace: monitoring
data:
  vector.toml: |

    # GLOBAL

    [api]
    enabled = true
    address = "0.0.0.0:8686"

    # SOURCES

    [sources.log_file]
    type = "file"
    include = ["/var/log/*.log"]

    [sources.kubernetes_logs]
    type = "kubernetes_logs"
    auto_partial_merge = true
    self_node_name = "${VECTOR_SELF_NODE_NAME}"


    [sources.prometheus_metrics]
    type = "prometheus_scrape"
    endpoints = ["http://monitoring-service.sc:8686/metrics"]


    # SINKS

    [sinks.console]
    inputs = ["log_file"]
    target = "stdout"
    type = "console"
    encoding.codec = "json"

    [sinks.prometheus]
    type = "prometheus_exporter"
    inputs = ["prometheus_metrics"]
    address = "0.0.0.0:9283"
    default_namespace = "sc"

    [sinks.loki]
    type = "loki"
    inputs = ["kubernetes_logs"]
    endpoint = "http://monitoring-service.sc:3100"
    encoding.codec = "json"
    labels = { host = "{{ host }}" }
 
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config
  namespace: monitoring
data:
  loki-local-config.yaml: |
    auth_enabled: false
    server:
      http_listen_port: 3100
    ingester:
      wal:
        enabled: false
      lifecycler:
        address: 127.0.0.1
        ring:
          kvstore:
            store: inmemory
          replication_factor: 1
        final_sleep: 0s
      chunk_idle_period: 1h       # Any chunk not receiving new logs in this time will be flushed
      max_chunk_age: 1h           # All chunks will be flushed when they hit this age, default is 1h
      chunk_target_size: 1048576  # Loki will attempt to build chunks up to 1.5MB, flushing first if chunk_idle_period or max_chunk_age is reached first
      chunk_retain_period: 30s    # Must be less than or equal to chunk_idle_period
      max_transfer_retries: 0     # Chunk transfers disabled
    schema_config:
      configs:
        - from: 2020-05-15
          store: boltdb-shipper
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h
    storage_config:
      boltdb_shipper:
        active_index_directory: /loki/boltdb-shipper-active
        cache_location: /loki/boltdb-shipper-cache
        cache_ttl: 24h          # Can be increased for faster performance over longer query periods, uses more disk space
        shared_store: filesystem
    compactor:
      working_directory: /loki/boltdb-shipper-compactor
      shared_store: filesystem
    limits_config:
      enforce_metric_name: false
      reject_old_samples: true
      reject_old_samples_max_age: 168h
    chunk_store_config:
      max_look_back_period: 0s
    table_manager:
      retention_deletes_enabled: false
      retention_period: 0s
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval:     15s
      evaluation_interval: 15s
    scrape_configs:
      - job_name: 'vector'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_app]
            action: keep
            regex: sidechains-substrate-poc
          - source_labels: [__meta_kubernetes_pod_label_node]
            action: keep
            regex: eve
          - source_labels: [__meta_kubernetes_pod_container_port_number]
            action: keep
            regex: "9182"
      - job_name: 'vector-static'
        static_configs:
          - targets: ['monitoring-service.monitoring:9182', 'alice-service.sc:9182', 'bob-service.sc:9182', 'charlie-service.sc:9182','dave-service.sc:9182','eve-service.sc:9182']
      - job_name: 'kube-state-metrics'
        static_configs:
          - targets: ['kube-state-metrics.monitoring.svc.cluster.local:8080']
      - job_name: 'node-exporter-dynamic'
        scrape_interval: 5s
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          target_label: __address__
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
      - job_name: 'cadvisor-dynamic'
        scrape_interval: 5s
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          target_label: __address__
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
      - job_name: 'substrate-node-dynamic'
        scrape_interval: 5s
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name
      - job_name: 'substrate-node-static'
        kubernetes_sd_configs:
        - role: service
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_label_app]
          action: keep
          regex: sidechains-substrate-poc
        - source_labels: [__meta_kubernetes_service_name]
          action: keep
          regex: '(alice|bob|charlie|dave|eve|ferdie|greg)-service'
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_service_name

      - job_name: 'alice-service-static'
        static_configs:
          - targets: ['alice-service.sc.svc.cluster.local:9615', 'alice-service.sc.svc.cluster.local:9182']
    
      - job_name: 'bob-service-static'
        static_configs:
          - targets: ['bob-service.sc.svc.cluster.local:9615', 'bob-service.sc.svc.cluster.local:9182']
    
      - job_name: 'charlie-service-static'
        static_configs:
          - targets: ['charlie-service.sc.svc.cluster.local:9615', 'charlie-service.sc.svc.cluster.local:9182']
    
      - job_name: 'dave-service-static'
        static_configs:
          - targets: ['dave-service.sc.svc.cluster.local:9615', 'dave-service.sc.svc.cluster.local:9182']
    
      - job_name: 'eve-service-static'
        static_configs:
          - targets: ['eve-service.sc.svc.cluster.local:9615', 'eve-service.sc.svc.cluster.local:9182']
    
      - job_name: 'ferdie-service-static'
        static_configs:
          - targets: ['ferdie-service.sc.svc.cluster.local:9615', 'ferdie-service.sc.svc.cluster.local:9182']
    
      - job_name: 'gh-actions-postgres-static'
        static_configs:
          - targets: ['gh-actions-postgres-service.sc.svc.cluster.local:5432']
    
      - job_name: 'relay-service-static'
        static_configs:
          - targets: ['relay-service.sc.svc.cluster.local:9615', 'relay-service.sc.svc.cluster.local:9182']

      - job_name: 'node-exporter-static'
        scrape_interval: 5s
        static_configs:
        - targets:
          - '10.0.10.171:9100'
          - '10.0.10.194:9100'
          - '10.0.10.233:9100'
          - '10.0.11.120:9100'
          - '10.0.11.184:9100'
          - '10.0.11.224:9100'
          - '10.0.12.174:9100'
          - '10.0.12.184:9100'
          - '10.0.12.21:9100'
       
      - job_name: 'cadvisor-static'
        scrape_interval: 5s
        static_configs:
        - targets:
          - '10.0.10.171:8080'
          - '10.0.10.194:8080'
          - '10.0.10.233:8080'
          - '10.0.11.120:8080'
          - '10.0.11.184:8080'
          - '10.0.11.224:8080'
          - '10.0.12.174:8080'
          - '10.0.12.184:8080'
          - '10.0.12.21:8080'
        
      
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: monitoring
data:
  grafana.ini: |-
    [auth.anonymous]
    # enable anonymous access
    enabled = true
    # specify organization
    org_name = Main Org.
    # specify role for unauthenticated users
    org_role = Viewer

    [dashboards]
    # The path to the default home dashboard
    default_home_dashboard_path = /etc/grafana/dashboards/default/grafana-dashboard.json
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        url: http://localhost:9090
        access: proxy
        isDefault: true
        uid: prometheus_uid
      - name: Loki
        type: loki
        url: http://localhost:3100
        access: proxy
        uid: loki_uid 
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-provisioning
  namespace: monitoring
data:
  dashboards.yaml: |-
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /etc/grafana/dashboards/default
---
apiVersion: v1
kind: Service
metadata:
  name: monitoring-service
  namespace: monitoring
spec:
  type: NodePort
  selector:
    app: monitoring-pod
  ports:
    - name: grafana
      port: 3000
      targetPort: 3000
      nodePort: 30000
    - name: prometheus
      port: 9090
      targetPort: 9090
      nodePort: 30010
    - name: loki
      port: 3100
      targetPort: 3100
      nodePort: 30020
    - name: vector-api
      port: 8686
      targetPort: 8686
      nodePort: 30030
    - name: vector-prometheus
      port: 9283
      targetPort: 9283
      nodePort: 30040
---
apiVersion: v1
kind: Pod
metadata:
  name: monitoring
  namespace: monitoring
  labels:
    app: monitoring-pod
spec:
  nodeSelector:
    pod: monitoring
  containers:
    - name: vector
      image: timberio/vector:nightly-alpine
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "4096Mi"
          cpu: "1500m"
        requests:
          memory: "4096Mi"
          cpu: "1500m"
      ports:
        - containerPort: 8686
      env:
        - name: VECTOR_SELF_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
      volumeMounts:
        - name: vector-config
          mountPath: /etc/vector
        - name: vector-data
          mountPath: /var/log
    - name: loki
      image: grafana/loki
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "4096Mi"
          cpu: "1500m"
        requests:
          memory: "4096Mi"
          cpu: "1500m"
      ports:
        - containerPort: 3100
      args:
        - -config.file=/etc/loki/loki-local-config.yaml
      volumeMounts:
        - name: loki-data
          mountPath: /loki
        - name: loki-config
          mountPath: /etc/loki
    - name: prometheus
      image: prom/prometheus:v2.45.0
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "4096Mi"
          cpu: "2000m"
        requests:
          memory: "4096Mi"
          cpu: "2000m"
      ports:
        - containerPort: 9090
      volumeMounts:
        - name: prometheus-data
          mountPath: /prometheus
        - name: prometheus-config
          mountPath: /etc/prometheus/prometheus.yml
          subPath: prometheus.yml
    - name: grafana
      image: grafana/grafana:10.0.1
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "8192Mi"
          cpu: "2000m"
        requests:
          memory: "8192Mi"
          cpu: "2000m"
      ports:
        - containerPort: 3000
      volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
        - name: grafana-config
          mountPath: /etc/grafana
        - name: grafana-dashboard
          mountPath: /etc/grafana/dashboards/default
        - name: grafana-dashboards-provisioning
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
  volumes:
    - name: vector-config
      configMap:
        name: monitoring-vector-configmap
    - name: vector-data
      persistentVolumeClaim:
        claimName: monitoring-claim-vector
    - name: loki-data
      persistentVolumeClaim:
        claimName: monitoring-claim-loki
    - name: loki-config
      configMap:
        name: loki-config
    - name: prometheus-data
      persistentVolumeClaim:
        claimName: monitoring-claim-prometheus
    - name: prometheus-config
      configMap:
        name: prometheus-config
    - name: grafana-data
      persistentVolumeClaim:
        claimName: monitoring-claim-grafana
    - name: grafana-config
      configMap:
        name: grafana-config
    - name: grafana-dashboard
      configMap:
        name: grafana-dashboard
    - name: grafana-dashboards-provisioning
      configMap:
        name: grafana-dashboards-provisioning
    - name: grafana-datasources
      configMap:
        name: grafana-datasources
