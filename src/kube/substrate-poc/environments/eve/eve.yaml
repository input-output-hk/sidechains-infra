---
apiVersion: v1
kind: Service
metadata:
  name: eve-service
  namespace: sc
spec:
  type: NodePort
  selector:
    app: sidechains-substrate-poc
    node: eve
  ports:
    - name: p2p-port
      port: 30333
      targetPort: 30333
      nodePort: 30005
    - name: rpc-port
      port: 9933
      targetPort: 9933
      nodePort: 30025
    - name: vector-metrics
      port: 9182
      targetPort: 9182
    - name: substrate-node-metrics
      port: 9615
      targetPort: 9615
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: eve-vector-configmap
  namespace: sc
data:
  vector.toml: |
    # Vector's API for introspection
    [api]
    enabled = true
    address = "127.0.0.1:8686"
    playground = true

    # Input data from Kubernetes
    [sources.kubernetes_logs]
    type = "kubernetes_logs"

    # Collect Vector's internal metrics
    [sources.internal_metrics]
    type = "internal_metrics"

    # Collect Host metrics
    [sources.host_metrics]
    type = "host_metrics"
    collectors = ["cpu", "disk", "memory", "network"]

    # Transform data
    [transforms.remap]
    type = "remap"
    inputs = ["kubernetes_logs"]
    source = '''
    .processed_at = now()
    '''

    # Send data to Loki
    [sinks.loki]
    type = "loki"
    inputs = ["remap"]
    endpoint = "http://monitoring-service.sc:3100"
    encoding.codec = "json"
    labels.environment = "production"
    labels.application = "eve-service"

    # Prometheus Metrics
    [sinks.prometheus]
    type = "prometheus_exporter"
    inputs = ["remap", "internal_metrics", "host_metrics"]
    address = "0.0.0.0:9182"
---
apiVersion: v1
kind: Pod
metadata:
  name: eve
  namespace: sc
  labels:
    app: sidechains-substrate-poc
    node: eve
    substrate-node: 'true'
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '9615'
spec:
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: substrate-node
            operator: In
            values:
            - 'true'
        topologyKey: "kubernetes.io/hostname"
  nodeSelector:
    pod: eve
  containers:
    - name: cardano-node
      image: inputoutput/cardano-node:8.0.0
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "4096Mi"
          cpu: "1000m"
        requests:
          memory: "4096Mi"
          cpu: "1000m"
      env:
        - name: NETWORK
          value: "preview"
        - name: CARDANO_NODE_SOCKET_PATH
          value: /ipc/node.socket
      volumeMounts:
        - name: ipc
          mountPath: /ipc
        - name: cardano-node-data
          mountPath: /data
    - name: db-sync
      image: inputoutput/cardano-db-sync:13.1.1.0
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "4096Mi"
          cpu: "500m"
        requests:
          memory: "4096Mi"
          cpu: "500m"
      env:
        - name: NETWORK
          value: "preview"
        - name: POSTGRES_HOST
          value: "localhost"
        - name: POSTGRES_DB
          value: "cexplorer"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "password123"
        - name: POSTGRES_PORT
          value: "5432"
      volumeMounts:
        - name: ipc
          mountPath: /node-ipc
        - name: db-sync-state-dir
          mountPath: /var/lib
    - name: postgres
      image: postgres:15.3
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "2048Mi"
          cpu: "500m"
        requests:
          memory: "2048Mi"
          cpu: "500m"
      ports:
        - containerPort: 5432
          protocol: TCP
      env:
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "password123"
        - name: POSTGRES_DB
          value: "cexplorer"
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
      volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
    - name: bridge-backend
      image: 689191102645.dkr.ecr.eu-central-1.amazonaws.com/bridge-backend:0.11.0
      command: [ "/opt/docker/bin/bridge-backend", "-Dmainchain.epoch-duration=86400000", "-Dmainchain.security-parameter=432" ]
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "512Mi"
          cpu: "500m"
        requests:
          memory: "512Mi"
          cpu: "500m"
      env:
        - name: BRIDGE_BACKEND_SOCKET_PATH
          value: "/ipc/bridge.socket"
        - name: CARDANO_FOLLOWER_POSTGRES_USERNAME
          value: "postgres"
        - name: CARDANO_FOLLOWER_POSTGRES_PASSWORD
          value: "password123"
        - name: CARDANO_FOLLOWER_JDBC_URL
          value: "jdbc:postgresql://localhost:5432/cexplorer"
        - name: FUEL_MINTING_POLICY_ID
          value: "6623b6923de2d6b98fdf6da3c008f10c262b5a2499ffe61155787a17"
        - name: COMMITTEE_CANDIDATE_ADDRESS
          value: "addr_test1wr5duga03765fz7e457txh6587racmyj89vxu46m8vfnt2sw43exq"
        - name: COMMITTEE_NFT_POLICY_ID
          value: "4a79ec984902f69f254a5618540221711f33cbdc30558b99f27aafa6"
        - name: MERKLE_ROOT_NFT_POLICY_ID
          value: "b85c9969fd281f5d5f0bf453a104b960a7bc16464abe515de3439535"
        - name: DISTRIBUTED_SET_POLICY_ID
          value: "deadbeef"
        - name: BRIDGE_BACKEND_GRPC_TYPE
          value: "http2"
        - name: BRIDGE_BACKEND_GRPC_PORT
          value: "18080"
        - name: COMMITTEE_NFT_ADDRESS
          value: "addr_test1wrhk5g9wpld0hzl3x864w3094qzg0t4wrudvpx6m6muk3cqv0em98"
        - name: MERKLE_ROOT_NFT_ADDRESS
          value: "addr_test1wqupx3rnlc9zpx7tyy5v2tup4gsfrvq7tvutll9a0tx9qvcha75r6"
        - name: DISTRIBUTED_SET_NFT_ADDRESS
          value: "addr_test1wr6d3u0r6v5xjudetjlmju3l7ghfsxhd2rdnal389tk20lqsah7c9"
      volumeMounts:
        - name: ipc
          mountPath: /ipc
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
    - name: substrate-node
      image: 689191102645.dkr.ecr.eu-central-1.amazonaws.com/substrate-node:8fd169d4c5b08bb968e0b74d40eb7d7ee5251581
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "4096Mi"
          cpu: "1000m"
        requests:
          memory: "4096Mi"
          cpu: "1000m"
      env:
        - name: MC__FIRST_EPOCH_TIMESTAMP_MILLIS
          value: "1666656000000"
        - name: MC__FIRST_EPOCH_NUMBER
          value: "0"
        - name: MC__EPOCH_DURATION_MILLIS
          value: "86400000"
        - name: CHAIN_ID
          value: "0"
        - name: THRESHOLD_NUMERATOR
          value: "2"
        - name: THRESHOLD_DENOMINATOR
          value: "3"
        - name: GENESIS_COMMITTEE_UTXO
          value: "f17e6d3aa72095e04489d13d776bf05a66b5a8c49d89397c28b18a1784b9950e#0"
        - name: BRIDGE_BACKEND_GRPC_TYPE
          value: "http2"
        - name: BRIDGE_BACKEND_HTTP_PORT
          value: "18080"
      args:
        - "--eve"
        - "--base-path"
        - "/data"
        - "--chain"
        - "local"
        - "--validator"
        - "--node-key"
        - "0000000000000000000000000000000000000000000000000000000000000005"
        - "--bootnodes"
        - "/dns/alice-service.sc.svc.cluster.local/tcp/30333/p2p/12D3KooWEyoppNCUx8Yx66oV9fJnriXwCcXwDDUA2kj6vnc6iDEp"
        - "--unsafe-rpc-external"
        - "--rpc-port"
        - "9933"
        - "--rpc-cors=all"
        - "--prometheus-port"
        - "9615"
        - "--prometheus-external"
      ports:
        - containerPort: 30333
          name: p2p
        - containerPort: 9945
          name: ws-port
        - containerPort: 9933
          name: rpc-port
        - containerPort: 9615
          name: prometheus 
      volumeMounts:
        - name: substrate-node-data
          mountPath: /data
        - name: ipc
          mountPath: /ipc
    - name: vector
      image: timberio/vector:nightly-alpine
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "300Mi"
          cpu: "500m"
        requests:
          memory: "300Mi"
          cpu: "500m"
      env:
        - name: VECTOR_SELF_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
      ports:
        - containerPort: 8686
        - containerPort: 9182
      volumeMounts:
        - name: vector-config
          mountPath: /etc/vector
        - name: vector-logs
          mountPath: /var/log

  volumes:
    - name: cardano-node-data
      persistentVolumeClaim:
        claimName: eve-claim-cardano-node-data
    - name: postgres-data
      persistentVolumeClaim:
        claimName: eve-claim-postgres-data
    - name: substrate-node-data
      persistentVolumeClaim:
        claimName: eve-claim-substrate-node-data
    - name: db-sync-state-dir
      persistentVolumeClaim:
        claimName: eve-claim-db-sync-state-dir
    - name: ipc
      emptyDir: {}
    - name: vector-config
      configMap:
        name: eve-vector-configmap
    - name: vector-logs
      persistentVolumeClaim:
        claimName: eve-claim-vector-logs
