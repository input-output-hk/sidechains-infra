---
apiVersion: v1
kind: Secret
metadata:
  name: regcred
type: kubernetes.io/dockerconfigjson
data:
  #    echo -n '{"auths":{"305415268059.dkr.ecr.eu-central-1.amazonaws.com":{"auth":"'$(echo -n 'AWS:'$(aws ecr get-login-password --region eu-central-1) | base64 | tr -d '\n')'"}}}' | base64 | tr -d '\n'
  .dockerconfigjson: eyJhdXRocyI6eyIzMDU0MTUyNjgwNTkuZGtyLmVjci5ldS1jZW50cmFsLTEuYW1hem9uYXdzLmNvbSI6eyJhdXRoIjoiUVZkVE9tVjVTbmRaV0d4ellqSkdhMGxxYjJsWFIwWndUa1prV1U5V2FHaFdSMnN6WkVaWk5GVnRkSFpqTWxaUVpGZGtSRkpZV25oWlZtUkZWbFYwZW1KV1VrTk1NVlY0VVcxck5WbHRhM3BhUnpsb1RWZGFSRkpVYUhaWlZrSndXbnBTUWxNeWRIUk5iVVp5WTBac1QxTkhTazFOYlhoUVUwaEZNMkl3Vm05amJGWnRUbXRTZVZsWFVqUmhWR2cwV1ZVeGJsa3piek5VTURWeFZUTm9hVTFJVW1sa1JWcHlWV3N4TmxNeGJIaFhWbVJDWkc1cmQySXlUbFJPTW1OMlQwaEdkbVF4VmtkU00wcGFUbFJrV1UxSFZsZFRNSGd5VGxadk5GSkVTa1ZoYXpsd1pHc3hNV05GT1doV01IaDFZVWMxY21ScVNrdFJlazVyVGtkb2NtTkVWbkZTTW14d1pIcHNUV0l5UmsxV2JUbFhZMGhDVjFwNmJHaE5la3BaVmtSR1dHSlhhR2hYUlZKT1YwVjBWazFWTVRGV1JWWXlWbGRzZFZSWFdreFdiVVp5WlVkc1RGUXhaR2xhV0d4NlZFUlpNMk5yZEZSaFZrcHlZMVZPVFZKWE5XdFRWR2cxVlZkR2FGbFhjSE5pYkdONlRqRk9TMk5HVGt0YVZuQkRWbXBvTTFaNlRsQk5NbVJhWWtod01rc3lSbGRrYW1oVVl6SktWMDFyUlhwTWVrcElXakpTU2xveFVqSlRNbVJYVXpKR2RGWjZTbnBqVkVaSlZVUm5NVlF3Vm10T1dFSnVaVVUwZVZNd2JFcFNWRXBhV21zeFVWcHRXWGRVVlRoNVpVVXhTR0pyVm05V2EzUXlXakJ3YWxwRVZsRmpWVEZGVW1wQ1dFMVZNVmxaVmtWMllqSlNNMlZYTVZoU1ZHaEtWVEZhY21WRGRIcFRNblJEVlVac1dtRkhUVFZUUlhRelRVZG5lbGxXVW1GaFdFcEVaR3hOTkZaRmVESk9XRmsxVmpCR01tSnRhekJqVmxKU1N6TmtlVTVYUms1a1JVWnFUbGhLVGxvemJ6TlVSWGQzWVVSS2NHVnVhRkJQUlUxMlYwUlZNbFZJUW5kVVZVMXlVbGN3ZGxkcVFrZFNTR014VWpGT2NHUkdXbHBMZW1jeVdsaEdkbE5VV2xWak0wWjVaVWRaY21Gc2FIQlBSRTEzVWpKRk1sVldiRXBVTVd4aFUxUk9hVTFxVG10U1JUbDJZekZDZFZaNlZsRmtWRnBwWlVoS05WWlhPWFZqUkZJeVdWZDRjMlZWT0RGVWJscG9aVlpDVlZKSFNubE5iVVpVWkZSbk1Ga3hXbmRhUnpWWVVXeE9VbHBwT0RSa01XaHJZMnQ0V1dSSGRHeFVNRko1VDBSV1lVNVVXazVpUldONFdraEdiRTF0ZERGT1JtaERZV3MxY0VzemJGWlBSM0EyVkZOMFEyRlVVbTFYYTFKU1ZERkdOVlZJUVhsYVJXaEZVMWROZWxscmJFWmlSRVoxV21wS05sRnFaRlZXV0VwNFlqSm9jVmR1Um05WlYyeENZVlpXVEdKc1NtMVpNR1JMVDBkR2VVNHliRmhSTUZaeFZHdFdkMU5zVms5YVdHczBXbTVTYmxZelNUVlRlbFpMWWxVME1WRldSbkZXUjFGNllWTTVhMlF3YUZGT1JrNW9UREI0YVZkdFdtRlBWM0EwVWxSRk5HSnJTa1ZOUm1RMFZucGtRMUpWU2xkbFNHeDFaRWhOZDJOc1VsZGlNMFo2VTFkc1ZGUlZXbEJPTWxKMlpESmtNV0ZzV2xOU2JFNHhWMFZvYzFaWVRsQlNSVEZhVWtVeFUxWnFZekZpUjFaNVlrZEdUR050ZUUxaE1IaFJVa2hWZVdFd1l6TlNibWQzV210b2VFOVVTa1ZPYW14aFRURnZlV1F3VlRWVWEyeFJWVVZTU1ZJemFFSmhNREY2WkRCR2VVOUVVa2xaYTFJeFkzbDBVRkl5TlhsVFYzUXlWRWRrYVZreFZtMVZiRW8yVW0xR1FsSkhhR2hSYWtwWVpFUmFNR0pVUWt4VFYwcFlZekZaTVdSSWJ6TmFla0p1VERCYVFtSkhPRFZpYlZKQ1UxUkpNVTR5YkVWVlJURnlUa1ZvTVdJeWRFeGthWFF6Vm14V05GcFZOVk5PVjJjMFRrZEZkMVJ1WkRGYVZYUkhXbFZLY1dGRmEzaE9TRVpUWkRGa1YyTldTak5WV0VKUVlVVktSVTVJVWxOU1ZVcFdUVlpzZW1GdGRGbFZhVGswU3pKS05sRnNiM3BaYlhoSFlUSjBhMDFxWkZkUFNGcFhaV3BDU1ZreFVrTmlNbkJTWkZaV1drMHdUbE5sVm14RlZVUlNhV1ZHY0ZWaVZFSXpXbXRhY0dSRk1IWk1NbVJ0WTI1S1VHRnJielZaV0djeFlqQTRkbEV4V2tOalZsWlpUVVJqTWxvelRtOVRiRlpvWWtWNFlWSnJXazFaVjNkNFlWaHZNMk5FYTJsTVEwcHJXVmhTYUdFeVZqVkphbTlwVVZaR1JsRnJSa2xoUkU0MlYxVTVhMlJJUWtOUmJFNVhaSGs1V2sxdFJuVlBSVXBaVTFWUk1HRXpaRTFWVjFwMVlqRlNjVTVZY0ROWGJsSklVMnh3ZGxkc1JrSlJWVVpKVGtoa2JWRldiRXRUTWpsaFUxZG9NbGt3TlVKVlYwNUlZakJqTkdReVNsSlRWVXBDVWtWS2RsRnRaSEpqVjJoeVlWVmpOV1I2UWtOUmJtUkdaREJvYmxkVmNGcFRWbkJLVVZaa1ZsSkZTa0pTV0ZaT1VXdFdSbEpGWjNabGJtd3dUVWRHVWxOVVJuUlpiVkp6VlVVNWJsTlZTa1pUVlVVelZFaFNkMDVXUVhkTE0xVjZVMVU1UldNelFUUlhiV2d6VWpGS01HSXlSbTFrTVZaaFRqQnJNRTFHYUdwVlZURkVVa1ZyTlZWRlRrTlVSekZ0VFZWYWNWWkhkRFpVUkVKVFdXMXdTbE50Y0ZGVFZUbHZWa1pPVmxFd1RteGpiRVpEV1Zoc2NXTlhUa1ZrZWpCcFRFTktNbHBZU25waFZ6bDFTV3B2YVUxcFNYTkpibEkxWTBkVmFVOXBTa1ZSVmxKQ1dEQjBSbGRUU1hOSmJWWTBZMGRzZVZsWVVuQmlNalJwVDJwRk1rOUVVVEJPYW1ONVRYcFdPUT09In19fQ==
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres
  namespace: sidechains-substrate-poc
type: Opaque
data:
  postgres-db: "ZGI=" # db
  postgres-username: "ZGJfdXNlcm5hbWU=" # db_username
  postgres-password: "ZGJfcGFzc3dvcmQ=" # db_password
---
# The k8 service will allow db-sync to reach cardano-node via localhost:3001
apiVersion: v1
kind: Service
metadata:
  name: cardano-node-service
  namespace: sidechains-substrate-poc
spec:
  selector:
    app: cardano-node
  ports:
    - protocol: TCP
      port: 3001
      targetPort: 3001
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pgpass
  namespace: sidechains-substrate-poc
data:
  pgpass: |
    /run/postgresql::cexplorer::
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vector-config
  namespace: sidechains-substrate-poc
data:
  vector.toml: |
    [api]
    enabled = true
    address = "0.0.0.0:8686"

    [sources.log_file]
    type = "file"
    include = ["/var/log/*.log"]

    [sinks.prometheus]
    type = "prometheus_exporter"
    inputs = [ "my-source-or-transform-id" ]

    [sinks.console]
    inputs = ["log_file"]
    target = "stdout"
    type = "console"
    encoding.codec = "json"
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sidechains-substrate-poc
  namespace: sidechains-substrate-poc
spec:
  serviceName: sidechains-substrate-poc
  replicas: 1
  selector:
    matchLabels:
      app: sidechains-substrate-poc
  template:
    metadata:
      labels:
        app: sidechains-substrate-poc
    spec:
      containers:
        - name: substrate-node
          image: 689191102645.dkr.ecr.eu-central-1.amazonaws.com/sidechains:v0.0.1
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 30333
              protocol: TCP
            - containerPort: 9933
              protocol: TCP
            - containerPort: 9944
              protocol: TCP
            - containerPort: 9615
              protocol: TCP
          args:
            - "--base-path"
            - "/data/sidechains-substrate-poc"
            - "--chain"
            - "local"
            - "--validator"
            - "--node-key"
            - "0000000000000000000000000000000000000000000000000000000000000001"
          env: []
          volumeMounts:
            - name: chain-data
              mountPath: /chain-data

        - name: cardano-node
          image: inputoutput/cardano-node:8.0.0
          ports:
            - containerPort: 3001
          env:
            - name: NETWORK
              value: "preview"
            - name: CARDANO_NODE_SOCKET_PATH
              value: /ipc/node.socket
          volumeMounts:
            - name: node-ipc
              mountPath: /ipc
            - name: datavol
              mountPath: /opt/cardano/data

        - name: postgres
          image: postgres:15.3
          ports:
            - containerPort: 5432
              protocol: TCP
          env:
            - name: POSTGRES_USERNAME
              valueFrom:
                secretKeyRef:
                  name: postgres-username
                  key: postgres-username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-password
                  key: postgres-password
            - name: POSTGRES_HOST_AUTH_METHOD
              value: "trust"
            - name: POSTGRES_DB
              value: "cexplorer"
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
            - name: postgres-run
              mountPath: /run/postgresql

        - name: vector
          image: timberio/vector:nightly-alpine
          ports:
            - containerPort: 8686
          volumeMounts:
            - name: vector-config-volume
              mountPath: /etc/vector
            - name: logs
              mountPath: /var/log

        - name: bridge-backend
          image: 305415268059.dkr.ecr.eu-central-1.amazonaws.com/bridge-backend:0.0.15
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: postgres-run
              mountPath: /run/postgresql

        - name: cardano-db-sync
          image: inputoutput/cardano-db-sync:latest
          env:
            - name: NETWORK
              value: "preview"
            - name: CARDANO_NODE_SOCKET_PATH
              value: /ipc/node.socket
            - name: CARDANO_NODE_SOCKET_TCP_HOST
              value: "localhost"
            - name: CARDANO_NODE_SOCKET_TCP_PORT
              value:
                "3001"
                #command: ["/bin/sh", "-c"]
                #args:
                #  - |
                #    mkdir -p /configuration &&
                #    cp /pgpass/pgpass /configuration/pgpass &&
                #    chmod 600 /configuration/pgpass
          volumeMounts:
            - name: node-ipc
              mountPath: /ipc
            - name: postgres-run
              mountPath: /run/postgresql
            - name: pgpass
              mountPath: /pgpass

      volumes:
        - name: chain-data
          emptyDir: {}
        - name: node-ipc
          emptyDir: {}
        - name: datavol
          emptyDir: {}
        - name: keys
          emptyDir: {}
        - name: postgres-data
          emptyDir: {}
        - name: postgres-run
          emptyDir: {}
        - name: pgpass
          configMap:
            name: pgpass
        - name: vector-config-volume
          configMap:
            name: vector-config
        - name: logs
          emptyDir: {}
