apiVersion: v1
kind: Namespace
metadata:
  name: sidechains-substrate-poc-3
# alice
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alice-vector-config
  namespace: sidechains-substrate-poc-3
data:
  vector.toml: |
    [api]
    enabled = true
    address = "0.0.0.0:8686"
    [sources.log_file]
    type = "file"
    include = ["/var/log/*.log"]
    # [sinks.prometheus]
    # type = "prometheus_exporter"
    # inputs = [ "my-source-or-transform-id" ]
    [sinks.console]
    inputs = ["log_file"]
    target = "stdout"
    type = "console"
    encoding.codec = "json"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alice-secrets
  namespace: sidechains-substrate-poc-3
data:
  postgres_db: "cexplorer"
  postgres_user: "postgres"
  postgres_password: "password123"
---
apiVersion: v1
kind: Pod
metadata:
  name: alice
  namespace: sidechains-substrate-poc-3
  labels:
    app: alice
    node: alice
spec:
  containers:
    - name: alice-cardano-node
      image: inputoutput/cardano-node:8.0.0
      imagePullPolicy: IfNotPresent
      #resources:
      #  limits:
      #    memory: "1024Mi"
      #    cpu: "1000m"
      #  requests:
      #    memory: "1024Mi"
      #    cpu: "1000m"
      env:
        - name: NETWORK
          value: "preview"
        - name: CARDANO_NODE_SOCKET_PATH
          value: /ipc/node.socket
      volumeMounts:
        - name: alice-ipc
          mountPath: /ipc
        - name: alice-data
          mountPath: /opt/cardano/data
    - name: alice-db-sync
      image: inputoutput/cardano-db-sync:latest
      imagePullPolicy: IfNotPresent
      #resources:
      #  limits:
      #    memory: "4096Mi"
      #    cpu: "2000m"
      #  requests:
      #    memory: "4096Mi"
      #    cpu: "2000m"
      env:
        - name: NETWORK
          value: "preview"
        - name: POSTGRES_HOST
          value: "localhost"
        - name: POSTGRES_PORT
          value: "5432"
      volumeMounts:
        - name: alice-ipc
          mountPath: /node-ipc
        - name: alice-postgres-run
          mountPath: /run/postgresql
        - name: alice-secrets
          mountPath: /run/secrets
    - name: alice-postgres
      image: postgres:15.3
      imagePullPolicy: IfNotPresent
      #resources:
      #  limits:
      #    memory: "4096Mi"
      #    cpu: "2000m"
      #  requests:
      #    memory: "4096Mi"
      #    cpu: "2000m"
      ports:
        - containerPort: 5432
          protocol: TCP
      env:
        - name: POSTGRES_PASSWORD
          value: "password123"
        - name: POSTGRES_HOST_AUTH_METHOD
          value: "trust"
        - name: POSTGRES_DB
          value: "cexplorer"
      volumeMounts:
        - name: alice-data
          mountPath: /var/lib/postgresql/data
        - name: alice-postgres-run
          mountPath: /run/postgresql
    - name: alice-bridge-backend
      image: 689191102645.dkr.ecr.eu-central-1.amazonaws.com/bridge-backend:0.0.17
      imagePullPolicy: IfNotPresent
      #resources:
      #  limits:
      #    memory: "512Mi"
      #    cpu: "1000m"
      #  requests:
      #    memory: "512Mi"
      #    cpu: "1000m"
      volumeMounts:
        - name: alice-ipc
          mountPath: /node-ipc
        - name: alice-data
          mountPath: /var/lib/postgresql/data
    - name: alice-substrate-node
      image: 689191102645.dkr.ecr.eu-central-1.amazonaws.com/sidechains-substrate-node:v0.0.3
      imagePullPolicy: IfNotPresent
      #resources:
      #  limits:
      #    memory: "512Mi"
      #    cpu: "300m"
      #  requests:
      #    memory: "512Mi"
      #    cpu: "300m"
      args:
        - "--name"
        - "alice"
        - "--base-path"
        - "/data/alice"
        - "--chain"
        - "local"
        - "--validator"
        - "--node-key"
        - "0000000000000000000000000000000000000000000000000000000000000001"
      ports:
        - containerPort: 30333
          name: p2p
        - containerPort: 9945
          name: ws-port
        - containerPort: 9933
          name: rcp-port
      volumeMounts:
        - name: alice-data
          mountPath: /data
    - name: alice-vector
      image: timberio/vector:nightly-alpine
      imagePullPolicy: IfNotPresent
      #resources:
      #  limits:
      #    memory: "300Mi"
      #    cpu: "300m"
      #  requests:
      #    memory: "300Mi"
      #    cpu: "300m"
      ports:
        - containerPort: 8686
      volumeMounts:
        - name: alice-vector-config
          mountPath: /etc/vector
        - name: alice-vector-logs
          mountPath: /var/log
  volumes:
    - name: alice-data
      emptyDir: {}
    - name: alice-ipc
      emptyDir: {}
    - name: alice-postgres-run
      emptyDir: {}
    - name: alice-secrets
      configMap:
        name: alice-secrets
    - name: alice-vector-config
      configMap:
        name: alice-vector-config
    - name: alice-vector-logs
      emptyDir: {}
# bob
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: bob-vector-config
  namespace: sidechains-substrate-poc-3
data:
  vector.toml: |
    [api]
    enabled = true
    address = "0.0.0.0:8686"
    [sources.log_file]
    type = "file"
    include = ["/var/log/*.log"]
    # [sinks.prometheus]
    # type = "prometheus_exporter"
    # inputs = [ "my-source-or-transform-id" ]
    [sinks.console]
    inputs = ["log_file"]
    target = "stdout"
    type = "console"
    encoding.codec = "json"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: bob-secrets
  namespace: sidechains-substrate-poc-3
data:
  postgres_db: "cexplorer"
  postgres_user: "postgres"
  postgres_password: "password123"
---
apiVersion: v1
kind: Pod
metadata:
  name: bob
  namespace: sidechains-substrate-poc-3
  labels:
    app: bob
    node: bob
spec:
  containers:
    - name: bob-cardano-node
      image: inputoutput/cardano-node:8.0.0
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "1024Mi"
          cpu: "1000m"
        requests:
          memory: "1024Mi"
          cpu: "1000m"
      env:
        - name: NETWORK
          value: "preview"
        - name: CARDANO_NODE_SOCKET_PATH
          value: /ipc/node.socket
      volumeMounts:
        - name: bob-ipc
          mountPath: /ipc
        - name: bob-data
          mountPath: /opt/cardano/data
    - name: bob-db-sync
      image: inputoutput/cardano-db-sync:latest
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "4096Mi"
          cpu: "2000m"
        requests:
          memory: "4096Mi"
          cpu: "2000m"
      env:
        - name: NETWORK
          value: "preview"
        - name: POSTGRES_HOST
          value: "localhost"
        - name: POSTGRES_PORT
          value: "5432"
      volumeMounts:
        - name: bob-ipc
          mountPath: /node-ipc
        - name: bob-postgres-run
          mountPath: /run/postgresql
        - name: bob-secrets
          mountPath: /run/secrets
    - name: bob-postgres
      image: postgres:15.3
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "4096Mi"
          cpu: "2000m"
        requests:
          memory: "4096Mi"
          cpu: "2000m"
      ports:
        - containerPort: 5432
          protocol: TCP
      env:
        - name: POSTGRES_PASSWORD
          value: "password123"
        - name: POSTGRES_HOST_AUTH_METHOD
          value: "trust"
        - name: POSTGRES_DB
          value: "cexplorer"
      volumeMounts:
        - name: bob-data
          mountPath: /var/lib/postgresql/data
        - name: bob-postgres-run
          mountPath: /run/postgresql
    - name: bob-bridge-backend
      image: 689191102645.dkr.ecr.eu-central-1.amazonaws.com/bridge-backend
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "512Mi"
          cpu: "1000m"
        requests:
          memory: "512Mi"
          cpu: "1000m"
      volumeMounts:
        - name: bob-ipc
          mountPath: /node-ipc
        - name: bob-data
          mountPath: /var/lib/postgresql/data
    - name: bob-substrate-node
      image: 689191102645.dkr.ecr.eu-central-1.amazonaws.com/sidechains-substrate-node
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "512Mi"
          cpu: "300m"
        requests:
          memory: "512Mi"
          cpu: "300m"
      args:
        - "--name"
        - "bob"
        - "--base-path"
        - "/data/bob"
        - "--chain"
        - "local"
        - "--validator"
        - "--node-key"
        - "0000000000000000000000000000000000000000000000000000000000000001"
      ports:
        - containerPort: 30333
          name: p2p
        - containerPort: 9945
          name: ws-port
        - containerPort: 9933
          name: rcp-port
      volumeMounts:
        - name: bob-data
          mountPath: /data
    - name: bob-vector
      image: timberio/vector:nightly-alpine
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "300Mi"
          cpu: "300m"
        requests:
          memory: "300Mi"
          cpu: "300m"
      ports:
        - containerPort: 8686
      volumeMounts:
        - name: bob-vector-config
          mountPath: /etc/vector
        - name: bob-vector-logs
          mountPath: /var/log
  volumes:
    - name: bob-data
      emptyDir: {}
    - name: bob-ipc
      emptyDir: {}
    - name: bob-postgres-run
      emptyDir: {}
    - name: bob-secrets
      configMap:
        name: bob-secrets
    - name: bob-vector-config
      configMap:
        name: bob-vector-config
    - name: bob-vector-logs
      emptyDir: {}
# charlie
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: charlie-vector-config
  namespace: sidechains-substrate-poc-3
data:
  vector.toml: |
    [api]
    enabled = true
    address = "0.0.0.0:8686"
    [sources.log_file]
    type = "file"
    include = ["/var/log/*.log"]
    # [sinks.prometheus]
    # type = "prometheus_exporter"
    # inputs = [ "my-source-or-transform-id" ]
    [sinks.console]
    inputs = ["log_file"]
    target = "stdout"
    type = "console"
    encoding.codec = "json"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: charlie-secrets
  namespace: sidechains-substrate-poc-3
data:
  postgres_db: "cexplorer"
  postgres_user: "postgres"
  postgres_password: "password123"
---
apiVersion: v1
kind: Pod
metadata:
  name: charlie
  namespace: sidechains-substrate-poc-3
  labels:
    app: charlie
    node: charlie
spec:
  containers:
    - name: charlie-cardano-node
      image: inputoutput/cardano-node:8.0.0
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "1024Mi"
          cpu: "1000m"
        requests:
          memory: "1024Mi"
          cpu: "1000m"
      env:
        - name: NETWORK
          value: "preview"
        - name: CARDANO_NODE_SOCKET_PATH
          value: /ipc/node.socket
      volumeMounts:
        - name: charlie-ipc
          mountPath: /ipc
        - name: charlie-data
          mountPath: /opt/cardano/data
    - name: charlie-db-sync
      image: inputoutput/cardano-db-sync:latest
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "4096Mi"
          cpu: "2000m"
        requests:
          memory: "4096Mi"
          cpu: "2000m"
      env:
        - name: NETWORK
          value: "preview"
        - name: POSTGRES_HOST
          value: "localhost"
        - name: POSTGRES_PORT
          value: "5432"
      volumeMounts:
        - name: charlie-ipc
          mountPath: /node-ipc
        - name: charlie-postgres-run
          mountPath: /run/postgresql
        - name: charlie-secrets
          mountPath: /run/secrets
    - name: charlie-postgres
      image: postgres:15.3
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "4096Mi"
          cpu: "2000m"
        requests:
          memory: "4096Mi"
          cpu: "2000m"
      ports:
        - containerPort: 5432
          protocol: TCP
      env:
        - name: POSTGRES_PASSWORD
          value: "password123"
        - name: POSTGRES_HOST_AUTH_METHOD
          value: "trust"
        - name: POSTGRES_DB
          value: "cexplorer"
      volumeMounts:
        - name: charlie-data
          mountPath: /var/lib/postgresql/data
        - name: charlie-postgres-run
          mountPath: /run/postgresql
    - name: charlie-bridge-backend
      image: 689191102645.dkr.ecr.eu-central-1.amazonaws.com/bridge-backend
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "512Mi"
          cpu: "1000m"
        requests:
          memory: "512Mi"
          cpu: "1000m"
      volumeMounts:
        - name: charlie-ipc
          mountPath: /node-ipc
        - name: charlie-data
          mountPath: /var/lib/postgresql/data
    - name: charlie-substrate-node
      image: 689191102645.dkr.ecr.eu-central-1.amazonaws.com/sidechains-substrate-node
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "512Mi"
          cpu: "300m"
        requests:
          memory: "512Mi"
          cpu: "300m"
      args:
        - "--name"
        - "charlie"
        - "--base-path"
        - "/data/charlie"
        - "--chain"
        - "local"
        - "--validator"
        - "--node-key"
        - "0000000000000000000000000000000000000000000000000000000000000001"
      ports:
        - containerPort: 30333
          name: p2p
        - containerPort: 9945
          name: ws-port
        - containerPort: 9933
          name: rcp-port
      volumeMounts:
        - name: charlie-data
          mountPath: /data
    - name: charlie-vector
      image: timberio/vector:nightly-alpine
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "300Mi"
          cpu: "300m"
        requests:
          memory: "300Mi"
          cpu: "300m"
      ports:
        - containerPort: 8686
      volumeMounts:
        - name: charlie-vector-config
          mountPath: /etc/vector
        - name: charlie-vector-logs
          mountPath: /var/log
  volumes:
    - name: charlie-data
      emptyDir: {}
    - name: charlie-ipc
      emptyDir: {}
    - name: charlie-postgres-run
      emptyDir: {}
    - name: charlie-secrets
      configMap:
        name: charlie-secrets
    - name: charlie-vector-config
      configMap:
        name: charlie-vector-config
    - name: charlie-vector-logs
      emptyDir: {}
# dave
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dave-vector-config
  namespace: sidechains-substrate-poc-3
data:
  vector.toml: |
    [api]
    enabled = true
    address = "0.0.0.0:8686"
    [sources.log_file]
    type = "file"
    include = ["/var/log/*.log"]
    # [sinks.prometheus]
    # type = "prometheus_exporter"
    # inputs = [ "my-source-or-transform-id" ]
    [sinks.console]
    inputs = ["log_file"]
    target = "stdout"
    type = "console"
    encoding.codec = "json"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dave-secrets
  namespace: sidechains-substrate-poc-3
data:
  postgres_db: "cexplorer"
  postgres_user: "postgres"
  postgres_password: "password123"
---
apiVersion: v1
kind: Pod
metadata:
  name: dave
  namespace: sidechains-substrate-poc-3
  labels:
    app: dave
    node: dave
spec:
  containers:
    - name: dave-cardano-node
      image: inputoutput/cardano-node:8.0.0
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "1024Mi"
          cpu: "1000m"
        requests:
          memory: "1024Mi"
          cpu: "1000m"
      env:
        - name: NETWORK
          value: "preview"
        - name: CARDANO_NODE_SOCKET_PATH
          value: /ipc/node.socket
      volumeMounts:
        - name: dave-ipc
          mountPath: /ipc
        - name: dave-data
          mountPath: /opt/cardano/data
    - name: dave-db-sync
      image: inputoutput/cardano-db-sync:latest
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "4096Mi"
          cpu: "2000m"
        requests:
          memory: "4096Mi"
          cpu: "2000m"
      env:
        - name: NETWORK
          value: "preview"
        - name: POSTGRES_HOST
          value: "localhost"
        - name: POSTGRES_PORT
          value: "5432"
      volumeMounts:
        - name: dave-ipc
          mountPath: /node-ipc
        - name: dave-postgres-run
          mountPath: /run/postgresql
        - name: dave-secrets
          mountPath: /run/secrets
    - name: dave-postgres
      image: postgres:15.3
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "4096Mi"
          cpu: "2000m"
        requests:
          memory: "4096Mi"
          cpu: "2000m"
      ports:
        - containerPort: 5432
          protocol: TCP
      env:
        - name: POSTGRES_PASSWORD
          value: "password123"
        - name: POSTGRES_HOST_AUTH_METHOD
          value: "trust"
        - name: POSTGRES_DB
          value: "cexplorer"
      volumeMounts:
        - name: dave-data
          mountPath: /var/lib/postgresql/data
        - name: dave-postgres-run
          mountPath: /run/postgresql
    - name: dave-bridge-backend
      image: 689191102645.dkr.ecr.eu-central-1.amazonaws.com/bridge-backend
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "512Mi"
          cpu: "1000m"
        requests:
          memory: "512Mi"
          cpu: "1000m"
      volumeMounts:
        - name: dave-ipc
          mountPath: /node-ipc
        - name: dave-data
          mountPath: /var/lib/postgresql/data
    - name: dave-substrate-node
      image: 689191102645.dkr.ecr.eu-central-1.amazonaws.com/sidechains-substrate-node
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "512Mi"
          cpu: "300m"
        requests:
          memory: "512Mi"
          cpu: "300m"
      args:
        - "--name"
        - "dave"
        - "--base-path"
        - "/data/dave"
        - "--chain"
        - "local"
        - "--validator"
        - "--node-key"
        - "0000000000000000000000000000000000000000000000000000000000000001"
      ports:
        - containerPort: 30333
          name: p2p
        - containerPort: 9945
          name: ws-port
        - containerPort: 9933
          name: rcp-port
      volumeMounts:
        - name: dave-data
          mountPath: /data
    - name: dave-vector
      image: timberio/vector:nightly-alpine
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "300Mi"
          cpu: "300m"
        requests:
          memory: "300Mi"
          cpu: "300m"
      ports:
        - containerPort: 8686
      volumeMounts:
        - name: dave-vector-config
          mountPath: /etc/vector
        - name: dave-vector-logs
          mountPath: /var/log
  volumes:
    - name: dave-data
      emptyDir: {}
    - name: dave-ipc
      emptyDir: {}
    - name: dave-postgres-run
      emptyDir: {}
    - name: dave-secrets
      configMap:
        name: dave-secrets
    - name: dave-vector-config
      configMap:
        name: dave-vector-config
    - name: dave-vector-logs
      emptyDir: {}
# eve
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: eve-vector-config
  namespace: sidechains-substrate-poc-3
data:
  vector.toml: |
    [api]
    enabled = true
    address = "0.0.0.0:8686"
    [sources.log_file]
    type = "file"
    include = ["/var/log/*.log"]
    # [sinks.prometheus]
    # type = "prometheus_exporter"
    # inputs = [ "my-source-or-transform-id" ]
    [sinks.console]
    inputs = ["log_file"]
    target = "stdout"
    type = "console"
    encoding.codec = "json"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: eve-secrets
  namespace: sidechains-substrate-poc-3
data:
  postgres_db: "cexplorer"
  postgres_user: "postgres"
  postgres_password: "password123"
---
apiVersion: v1
kind: Pod
metadata:
  name: eve
  namespace: sidechains-substrate-poc-3
  labels:
    app: eve
    node: eve
spec:
  containers:
    - name: eve-cardano-node
      image: inputoutput/cardano-node:8.0.0
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "1024Mi"
          cpu: "1000m"
        requests:
          memory: "1024Mi"
          cpu: "1000m"
      env:
        - name: NETWORK
          value: "preview"
        - name: CARDANO_NODE_SOCKET_PATH
          value: /ipc/node.socket
      volumeMounts:
        - name: eve-ipc
          mountPath: /ipc
        - name: eve-data
          mountPath: /opt/cardano/data
    - name: eve-db-sync
      image: inputoutput/cardano-db-sync:latest
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "4096Mi"
          cpu: "2000m"
        requests:
          memory: "4096Mi"
          cpu: "2000m"
      env:
        - name: NETWORK
          value: "preview"
        - name: POSTGRES_HOST
          value: "localhost"
        - name: POSTGRES_PORT
          value: "5432"
      volumeMounts:
        - name: eve-ipc
          mountPath: /node-ipc
        - name: eve-postgres-run
          mountPath: /run/postgresql
        - name: eve-secrets
          mountPath: /run/secrets
    - name: eve-postgres
      image: postgres:15.3
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "4096Mi"
          cpu: "2000m"
        requests:
          memory: "4096Mi"
          cpu: "2000m"
      ports:
        - containerPort: 5432
          protocol: TCP
      env:
        - name: POSTGRES_PASSWORD
          value: "password123"
        - name: POSTGRES_HOST_AUTH_METHOD
          value: "trust"
        - name: POSTGRES_DB
          value: "cexplorer"
      volumeMounts:
        - name: eve-data
          mountPath: /var/lib/postgresql/data
        - name: eve-postgres-run
          mountPath: /run/postgresql
    - name: eve-bridge-backend
      image: 689191102645.dkr.ecr.eu-central-1.amazonaws.com/bridge-backend
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "512Mi"
          cpu: "1000m"
        requests:
          memory: "512Mi"
          cpu: "1000m"
      volumeMounts:
        - name: eve-ipc
          mountPath: /node-ipc
        - name: eve-data
          mountPath: /var/lib/postgresql/data
    - name: eve-substrate-node
      image: 689191102645.dkr.ecr.eu-central-1.amazonaws.com/sidechains-substrate-node
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "512Mi"
          cpu: "300m"
        requests:
          memory: "512Mi"
          cpu: "300m"
      args:
        - "--name"
        - "eve"
        - "--base-path"
        - "/data/eve"
        - "--chain"
        - "local"
        - "--validator"
        - "--node-key"
        - "0000000000000000000000000000000000000000000000000000000000000001"
      ports:
        - containerPort: 30333
          name: p2p
        - containerPort: 9945
          name: ws-port
        - containerPort: 9933
          name: rcp-port
      volumeMounts:
        - name: eve-data
          mountPath: /data
    - name: eve-vector
      image: timberio/vector:nightly-alpine
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "300Mi"
          cpu: "300m"
        requests:
          memory: "300Mi"
          cpu: "300m"
      ports:
        - containerPort: 8686
      volumeMounts:
        - name: eve-vector-config
          mountPath: /etc/vector
        - name: eve-vector-logs
          mountPath: /var/log
  volumes:
    - name: eve-data
      emptyDir: {}
    - name: eve-ipc
      emptyDir: {}
    - name: eve-postgres-run
      emptyDir: {}
    - name: eve-secrets
      configMap:
        name: eve-secrets
    - name: eve-vector-config
      configMap:
        name: eve-vector-config
    - name: eve-vector-logs
      emptyDir: {}
